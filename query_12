class DoesNotExist(Exception):
    pass

class MultipleObjectsReturned(Exception):
    pass

class InvalidField(Exception):
    pass


class Student:
    
    def __init__(self,name,age,score):
        self.name = name
        self.age = age
        self.score = score
        self.student_id = None
    @classmethod
    def get(cls, **keys):
        
        for k,v in keys.items():
            cls.a = k
            cls.b = v
        
        if cls.a not in ('name','age','score','student_id'):
            raise InvalidField()
        
        import sqlite3
        connection = sqlite3.connect("students.sqlite3")
        crsr = connection.cursor()
        sql_query = ("select * from Student where {} = '{}'".format(cls.a,cls.b))
        crsr.execute(sql_query)
        ans = crsr.fetchall()
        if len(ans) ==0 :
            raise DoesNotExist()
        
        if len(ans) > 1:
            raise MultipleObjectsReturned
        
        obj = Student(ans[0][1],ans[0][2],ans[0][3])
        
        obj.student_id = ans[0][0]
        
        connection.close()
        return obj
    
    def delete(self):
        import sqlite3
        connection = sqlite3.connect("students.sqlite3")
        crsr = connection.cursor()
        sql_query = ("DELETE from Student where student_id = {}".format(self.student_id))
        crsr.execute(sql_query)
        connection.commit()
        connection.close()
        
        
    def save(self):
        import sqlite3
        connection = sqlite3.connect("students.sqlite3")
        crsr = connection.cursor()
        if self.student_id == None :
            sql_query =("INSERT INTO Student(name,age,score) VALUES('{}',{},{})".format(self.name,self.age,self.score))
            res = crsr.execute(sql_query)
            self.student_id = crsr.lastrowid
        else :
            sql_query = (f"UPDATE Student SET name = \'{self.name}\',age = {self.age},score = {self.score} WHERE student_id = {self.student_id}")
            crsr.execute(sql_query)
        
        connection.commit()
